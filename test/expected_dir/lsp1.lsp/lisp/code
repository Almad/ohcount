(DEFUN THROW-DIE ()
(+ (RANDOM 6) 1)          ;;; get a random number between 0 and 5 and then add 1
)
(DEFUN THROW-DICE ()       
(LIST (THROW-DIE) (THROW-DIE))              ;;; create a list with two random numbers
)
(DEFUN BOXCARS-P (A B)
(AND (EQUAL '6 A)                      
(EQUAL '6 B)
)
)
(DEFUN SNAKE-EYES-P (A B)
(AND (EQUAL '1 A)                       
(EQUAL '1 B)
)
)
(DEFUN INSTANT-WIN-P (A B)
(OR (EQUAL '7 (+ A B))                  
(EQUAL '11 (+ A B))
)
)
(DEFUN INSTANT-LOSS-P (A B)
(OR (EQUAL '2 (+ A B))
(EQUAL '3 (+ A B))
(EQUAL '12 (+ A B))
)
)
(DEFUN SAY-THROW (A B)
(COND ((BOXCARS-P A B) 'BOXCARS)                 ;;; make use of function BOXCARS_P
((SNAKE-EYES-P A B) 'SNAKE-EYES)           ;;; make use of function SNAKE_EYES_P
)
)
(DEFUN CRAPS ()
(LET THROW (THROW-DICE))                        ;;; get initial roll of the dice
(COND ((INSTANT-WIN-P (FIRST THROW) (SECOND THROW)) 
(LIST 'THROW (FIRST THROW) 'AND (SECOND THROW) '-- (+ (FIRST THROW) (SECOND THROW)) '-- 'YOU 'WIN))
((INSTANT-LOSS-P (FIRST THROW) (SECOND THROW))
(IF (EQUAL 'NIL (SAY-THROW (FIRST THROW) (SECOND THROW)))   ;;; if Nil then LIST appropriate output
(LIST 'THROW (FIRST THROW) 'AND (SECOND THROW) '-- (+ (FIRST THROW) (SECOND THROW)) '-- 'YOU 'LOSE)
(LIST 'THROW (FIRST THROW) 'AND (SECOND THROW) '-- (SAY-THROW (FIRST THROW) (SECOND THROW)) 
'-- 'YOU 'LOSE)))
(T (LIST 'THROW (FIRST THROW) 'AND (SECOND THROW) '-- 'YOUR 'POINT 'IS (+ (FIRST THROW) 
(SECOND THROW))))
)        ;;; end COND
)           ;;; end LET
)
