#pike __REAL_VERSION__
class client {
string host;
int port;
private object conn;
int jobnum;
string jobtype;
string jobname;
private int connect(string host, int port)
{
int a=random(10);
int res=conn->open_socket(721 + a);
return conn->connect(host, port);
}
int set_job_type(string type)
{
type=lower_case(type);
switch (type) { 
case "f":
case "text":
jobtype="f";
break;
case "o":
case "postscript":
case "ps":
jobtype="o";
break;
default:
case "l":
case "raw":
jobtype="l";
break;
}
return 1;
}
int set_job_name(string name)
{
jobname=name;
return 1;
}
int start_queue(string queue)
{
if(!queue) return 0;
if(!connect(host, port))
return 0;
conn->write(sprintf("%c%s\n", 01, queue));
string resp= conn->read();
conn->close();
return 1;
}
int send_job(string queue, string job)
{
string resp;
if(!queue) return 0;
if(!connect(host, port))
return 0;
string control="";
control+="H"+gethostname()+"\n";
#if constant(getuid) && constant(getpwuid)
control+="P"+(getpwuid(getuid())[0]||"nobody")+"\n";
#else
control+="P-1\n";
#endif
control+=(jobtype||"l")+"dfA"+ sprintf("%03d%s", jobnum, gethostname())+"\n";
if(jobname)
{
control+="J" + jobname + "\n";
control+="N" + jobname + "\n";
}
else
{ 
control+="JPike LPD Client Job " + jobnum + "\n";
control+="NPike LPD Client Job " + jobnum + "\n";
}
jobnum++;
werror("job file:\n\n" + control  + "\n\n");
conn->write(sprintf("%c%s\n", 02, queue));
resp=conn->read(1);
if((int)resp !=0)
{
werror("receive job failed.\n");
return 0;
}
conn->write(sprintf("%c%s cfA%03d%s\n", 02, (string)sizeof(control),
jobnum,gethostname()));
resp=conn->read(1);
if((int)resp !=0)
{
werror("request receive control failed.\n");
return 0;
}
conn->write(sprintf("%s%c", control, 0));
resp=conn->read(1);
if((int)resp !=0)
{
werror("send receive control failed.\n");
return 0;
}
conn->write(sprintf("%c%s dfA%03d%s\n", 03, (string)sizeof(job), jobnum,
gethostname()));
resp=conn->read(1);
if((int)resp !=0)
{
werror("request receive job failed.\n");
return 0;
}
conn->write(sprintf("%s%c", job, 0));
resp=conn->read(1);
if((int)resp !=0)
{
werror("send receive job failed.\n");
return 0;
}
if((int)(resp)!=0) 
{ 
conn->close();
return 0;
}
conn->close();
return 1;
}
int delete_job(string queue, int|void job)
{
if(!queue) return 0;
if(!connect(host, port))
return 0;
#if constant(getpwuid) && constant(getuid)
string agent=(getpwuid(getuid())[0]||"nobody");
#else
string agent="nobody";
#endif
if(job)
conn->write(sprintf("%c%s %s %d\n", 05, queue, agent, job));
else
conn->write(sprintf("%c%s %s\n", 05, queue, agent));
string resp= conn->read();
conn->close();
return 1;
}
string|int status(string queue)
{
if(!queue) return 0;
if(!connect(host, port))
return 0;
conn->write(sprintf("%c%s\n", 04, queue));
string resp= conn->read();
conn->close();
return resp;
}
void create(string|void hostname, int|void portnum)
{
host=hostname || "localhost";
port=portnum || 515;
conn=Stdio.File();
jobnum=1;
}
}
