#!/usr/bin/env ruby
begin
	# First, try to load our files from the source tree
	$: << "#{File.dirname(__FILE__)}/../lib"
	require 'ohcount'
rescue LoadError
	# Failing that, try to load from a gem
	require 'rubygems'
	require 'ohcount'
end

class OhcountCommandLine
	attr_accessor :paths

	def initialize(args=[])
		args = args.clone # Because shift is destructive
		set_option(args.shift) while args.first =~ /^-/
		self.paths = args
	end

	def paths
		@paths || []
	end

	def paths=(p)
		@paths=p
		@files = nil # If we change the search paths, clear the cache filenames
	end

	def files
		return @files if @files

		@files = []
		(self.paths.any? ? self.paths : ['.']).each { | p | self.find_files_recursively @files, p }

		exit 1 unless @files.any?
		@files
	end

	def find_files_recursively array, path
		s = File.lstat(path)
		if s.directory?
			Dir.foreach(path) do | d |
				File.basename(d) =~ /^\./ and next
				find_files_recursively array, File.join(path, d)
			end
		elsif s.file?
			array << path
		end
	end

	def annotate
		files.each do |file|
			s = Ohcount::SourceFile.new(file, :filenames => files)
			s.parse do |language, semantic, line|
				puts "#{language}\t#{semantic}\t#{line}"
			end
		end
	end

	# Find all source code files
	def detect
		files.each do |file|
			s = Ohcount::SourceFile.new(file, :filenames => files)
			puts "#{s.polyglot}\t#{file}" if s.polyglot
		end
	end

  # Licenses
  def licenses
		files.each do |file|
			s = Ohcount::SourceFile.new(file, :filenames => files)
      next unless s.licenses.any?
			symbols = licenses.collect { |l| LicenseSniffer::LicenseMap.instance.map[l].symbol }.join(",")
			puts "#{symbols}\t#{file}"
    end
  end

  # Gestalt
	def gestalt
		g = Ohcount::Gestalt::Base.new(:files => files)
		puts "processing #{files.size} files... (this could take a while)"
		g.process!
		platforms = g.platforms.any? ? g.platforms.collect { |p| p.to_s }.join(", ") : 'None'
		puts "Platforms detected: #{ platforms }"
	end

	def raw_entities
		files.each do |file|
			Ohcount::SourceFile.new(file, :filenames => files).raw_entities do |language, entity, s, e|
				puts "#{language}\t#{entity}\t#{s}\t#{e}"
			end
		end
	end

	def help
		puts <<HELP
Usage: ohcount [option] [paths...]

Ohloh source code line counter command line tool.
   http://www.ohloh.net/

[option] can be one of the following:
   -a, --annotate
   -d, --detect
	 -re
   -h, --help
   -s, --summary

-a, --annotate                  Show annotated source code

   The contents of all source code files found within the given
   paths will be emitted to stdout. Each line will be prefixed with
   a tab-delimited language name and semantic categorization (code,
   comment, or blank).

-d, --detect                    Find source code files

   Recursively find all source code files within the given paths.
   For each source code file found, the file name will be emitted to
   stdout prefixed with a tab-delimited language name.

-h, --help                      Display this message

-g, --gestalt                   Project Properties

   Inspects project contents to determine what platform(s) the project
   runs on, as well as any detected tools/IDEs used to develop it.

-i, --individual                Count lines of code per file

   Count lines in all source code files within the given paths, and
   emit a report of the lines of code, comments, and blanks in each
   language per file.

-l, --license

   Displays detected licensing information contained in each source
   code file.

-re

   Prints raw entity information to the screen (mainly for debugging).

-s, --summary                   Count lines of code (default)

   Count lines in all source code files within the given paths, and
   emit a report of the total number of lines of code, comments,
   and blanks in each language. This is the default action.

[paths] can refer to any number of individual files or directories.
   Directories will be probed recursively. If no path is given,
   the current directory will be used.

HELP
	end

	def individual
		STDOUT.write "Examining #{files.size} file(s)"

		puts
		puts "Ohloh Line Count".center(76)
		puts "Language             Code    Comment  Comment %      Blank      Total  File"
		puts "--------------  ---------  ---------  ---------  ---------  ---------  -----------------------------------------------"

		files.each do |file|
			counts = {}
			languages_found=[]
			s = Ohcount::SourceFile.new(file, :filenames => files)
			if s.source_code?
				s.parse do |language_name, semantic, line|
					counts[language_name] ||={:code => 0, :comment => 0, :blank => 0}
					counts[language_name][semantic] += 1
					languages_found << language_name unless languages_found.include?(language_name)
				end
			end

			counts.keys.sort{ |a,b| counts[b][:code] <=> counts[a][:code] }.each do |key|
				write_individual_row(file, key, counts[key][:code],counts[key][:comment],counts[key][:blank])
			end
		end
	end

	def write_individual_row(file, name, code, comment, blank)
		printf("%-14s",name)
		printf(" %10d",code)
		printf(" %10d",comment)
		if comment+code > 0
			printf(" %9.1f%%", comment.to_f / (comment+code).to_f * 100.0)
		else
			printf("           ")
		end
		printf(" %10d",blank)
		printf(" %10d",code+comment+blank)
		printf("  %s\n", file)
	end

	def memoryleak
		puts "Parsing one file repeatedly. Watch your RAM vanish...."
		s = Ohcount::SourceCode.new(files.first, :filenames => files)
		while true
			s.parse {}
		end
	end


	def summary
		STDOUT.write "Examining #{files.size} file(s)"

		counts = {}
		any_language_file_count = 0
		progress = 0

		files.each do |file|
			languages_found = []
			Ohcount::SourceFile.new(file, :filenames => files).parse do |language_name, semantic, line|
				counts[language_name] ||= {:code => 0, :comment => 0, :blank => 0}
				counts[language_name][semantic] += 1
				languages_found << language_name unless languages_found.include?(language_name)
			end

			# Keep a running total of the number of files that include a specific language
			languages_found.each { |l| counts[l][:files] = (counts[l][:files] || 0) + 1 }

			# Keep a running total of the number of files that include any language
			any_language_file_count += 1 if languages_found.any?

			progress += 1
			if (progress % 100 == 0)
				STDOUT.write('.')
				STDOUT.flush
			end
		end

		puts
		puts "Ohloh Line Count Summary".center(76)
		puts

		puts "Language        Files       Code    Comment  Comment %      Blank      Total"
		puts "--------------  -----  ---------  ---------  ---------  ---------  ---------"

		counts.keys.sort{ |a,b| counts[b][:code] <=> counts[a][:code] }.each do |key|
			write_summary_row(key, counts[key][:files], counts[key][:code], counts[key][:comment], counts[key][:blank])
		end

		puts "--------------  -----  ---------  ---------  ---------  ---------  ---------"
		write_summary_row('Total', any_language_file_count,
											counts.values.inject(0) { |sum, v| sum + v[:code] },
											counts.values.inject(0) { |sum, v| sum + v[:comment] },
											counts.values.inject(0) { |sum, v| sum + v[:blank] })
	end

	def write_summary_row(name, file_count, code, comment, blank)
		printf("%-14s", name)
		printf(" %6d", file_count)
		printf(" %10d", code)
		printf(" %10d", comment)
		if comment+code > 0
			printf(" %9.1f%%", comment.to_f / (comment+code).to_f * 100.0)
		else
			printf("       0.0%");
		end
		printf(" %10d", blank)
		printf(" %10d\n", code+comment+blank)
	end

	def subcommand=(s)
		if @subcommand
			STDERR.puts "Error: Multiple commands specified."
			exit 1
		else
			@subcommand=s
		end
	end

	def subcommand
		@subcommand
	end

	def set_option(option)
		case option
		when '-s', '--summary'
			self.subcommand = :summary
		when '-d', '--detect'
			self.subcommand = :detect
		when '-a', '--annotate'
			self.subcommand = :annotate
		when '-g', '--gestalt'
			self.subcommand = :gestalt
		when '-i', '--individual'
			self.subcommand = :individual
    when '-l', '--licenses'
      self.subcommand = :licenses
    when '-m', '--memoryleak'
      self.subcommand = :memoryleak
		when '-e', '--entities'
			self.subcommand = :entities
		when '-re'
			self.subcommand = :raw_entities
		#when /-n([\w_]+)/
		#	@entities ||= []
		#	@entities << $1.to_sym
		#	self.subcommand = :entities unless @subcommand
		when '-?', '-h', '--help'
			self.subcommand = :help
		else
			STDERR.puts "Type 'ohcount -?' for usage."
			exit 1
		end
	end

	def run!
		self.subcommand ||= :gestalt
		if self.respond_to?(self.subcommand)
			self.send(self.subcommand)
		else
			STDERR.puts "Type 'ohcount -?' for usage."
			exit 1
		end
	end
end

OhcountCommandLine.new(ARGV).run!
